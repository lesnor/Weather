{"version":3,"sources":["components/CreateForm/createForm.module.css","components/UI/Link/MyLink.module.css","components/UI/Loader/Loader.module.css","components/CreateForm/CreateForm.jsx","components/utils/checkIsCityExist.js","components/utils/fetchCityInfo.js","store/constans/constans.js","store/actions/actions.js","components/utils/timer.js","components/UI/Link/MyLink.jsx","helpers/index.js","constants/index.js","components/Card/Card.jsx","pages/Posts.jsx","components/UI/Loader/Loader.jsx","pages/postCity/PostCity.jsx","App.js","store/reducers/stateReducer.js","store/rootReducer.js","store/configureStore.js","index.js"],"names":["module","exports","Createform","setWeather","useState","city","setCity","className","cl","onSubmit","event","preventDefault","action","type","placeholder","value","onChange","target","checkIsCityExist","cityId","JSON","parse","localStorage","getItem","find","id","fetchCityInfo","cityName","a","axios","get","FETCH_CITY_WEATHER","ADD_CITY_TO_LIST","REMOVE_CITY_FROM_LIST","UPDATE_CITY_INFO","fetchCityWeather","cityInfo","constans","saveCityInfo","cities","push","setItem","stringify","getCityWeather","dispatch","then","weatherInfo","console","log","data","formatDate","timezone","Date","setMinutes","getMinutes","getTimezoneOffset","month","getMonth","getDate","getHours","getSeconds","MyLink","to","children","style","myLink","getTemperature","temp","toFixed","mapDispatchToProps","updateCityInfo","updatedCityInfo","updatedCitiesList","map","name","connect","handleRemoveCity","currentTemp","main","classnames","onClick","src","weather","icon","alt","fontWeight","removeCityFromList","filteredCitiesList","filter","state","stateReducer","weathers","isShowCard","isShowCity","fetchWeather","Loader","classes","loader","meters","useParams","useEffect","position","top","right","textAlign","paddingTop","pressure","humidity","clouds","all","wind","deg","visibility","speed","display","justifyContent","marginTop","App","exact","path","initialState","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","logger","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0a8e3b68.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Createform\":\"createForm_Createform__1OGYQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myLink\":\"MyLink_myLink__2ppuP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Loader_loader__TITNl\",\"rotate\":\"Loader_rotate__1T6dh\"};","import React, { useState } from 'react';\r\nimport cl from './createForm.module.css';\r\n\r\nconst Createform = ({ setWeather }) => {\r\n  const [city, setCity] = useState('Харьков');\r\n  const setCityValue = (event) => {\r\n    setCity(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    setWeather(city);\r\n  };\r\n\r\n  return (\r\n    <form className={cl.Createform} onSubmit={handleSubmit} action=\"\" data-testid={'create-form'}>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Выберите город\"\r\n        value={city}\r\n        onChange={setCityValue}\r\n      />\r\n      <button data-testid={'submit-form'}>Узнать погоду</button>\r\n    </form>\r\n  );\r\n};\r\nexport default Createform;\r\n","export const checkIsCityExist = (cityId) => {\r\n  const cities = JSON.parse(localStorage.getItem('cities')) || [];\r\n  const isCityAlreadyExist = cities.find((city) => cityId === city.id);\r\n  return isCityAlreadyExist;\r\n};\r\n","import axios from 'axios';\r\n\r\nexport const fetchCityInfo = async (cityName) => {\r\n  const city = await axios.get(\r\n    ` https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=1cd9453f9b6e6661890c8dc7a011898d`\r\n  );\r\n  return city;\r\n};\r\n","export const ADD_CARD = 'ADD_CARD';\r\nexport const FETCH_CITY_WEATHER = 'FETCH_CITY_WEATHER';\r\nexport const ADD_CITY_TO_LIST = 'ADD_CITY_TO_LIST';\r\nexport const SAVE_CITY_INFO = 'SAVE_CITY_INFO';\r\nexport const REMOVE_CITY_FROM_LIST = 'REMOVE_CITY_FROM_LIST';\r\nexport const ADD_CITY_TO_LIST_FAILURE = 'ADD_CITY_TO_LIST_FAILURE';\r\nexport const UPDATE_CITY_INFO = 'UPDATE_CITY_INFO';\r\n","import { checkIsCityExist } from '../../components/utils/checkIsCityExist';\r\nimport { fetchCityInfo } from '../../components/utils/fetchCityInfo';\r\nimport * as constans from '../constans/constans';\r\n\r\nexport const fetchCityWeather = (cityInfo) => ({\r\n  type: constans.FETCH_CITY_WEATHER,\r\n  cityInfo,\r\n});\r\n\r\nexport const addCityToList = (cityInfo) => {\r\n  if (checkIsCityExist(cityInfo.id)) {\r\n    return { type: constans.ADD_CITY_TO_LIST_FAILURE };\r\n  } else {\r\n    return { type: constans.ADD_CITY_TO_LIST, cityInfo };\r\n  }\r\n};\r\n\r\nexport const updateCityInfo = (cityName) => async (dispatch) => {\r\n  const cities = JSON.parse(localStorage.getItem('cities'));\r\n  const updatedCityInfo = await fetchCityInfo(cityName);\r\n  const updatedCitiesList = cities.map((city) => {\r\n    if (cityName === city.name) {\r\n      return updatedCityInfo.data;\r\n    } else {\r\n      return city;\r\n    }\r\n  });\r\n  localStorage.setItem('cities', JSON.stringify(updatedCitiesList));\r\n  dispatch({\r\n    type: constans.UPDATE_CITY_INFO,\r\n    cities: updatedCitiesList,\r\n  });\r\n};\r\n\r\nexport const removeCityFromList = (cityId) => (dispatch) => {\r\n  const cities = JSON.parse(localStorage.getItem('cities'));\r\n  const filteredCitiesList = cities.filter((city) => !(cityId === city.id));\r\n  console.log(filteredCitiesList);\r\n  localStorage.setItem('cities', JSON.stringify(filteredCitiesList));\r\n  dispatch({\r\n    type: constans.REMOVE_CITY_FROM_LIST,\r\n    cities: filteredCitiesList,\r\n  });\r\n};\r\n\r\nexport const saveCityInfo = (cityInfo) => () => {\r\n  const cities = JSON.parse(localStorage.getItem('cities')) || [];\r\n  !checkIsCityExist(cityInfo.id) && cities.push(cityInfo);\r\n  localStorage.setItem('cities', JSON.stringify(cities));\r\n  return {\r\n    type: constans.SAVE_CITY_INFO,\r\n  };\r\n};\r\n\r\nexport const getCityWeather = (cityName) => async (dispatch) => {\r\n  fetchCityInfo(cityName).then((weatherInfo) => {\r\n    console.log(weatherInfo);\r\n    dispatch(fetchCityWeather(weatherInfo.data));\r\n    dispatch(addCityToList(weatherInfo.data));\r\n    dispatch(saveCityInfo(weatherInfo.data));\r\n  });\r\n};\r\n// 1cd9453f9b6e6661890c8dc7a011898d\r\n// 0eb576c188bc534fb5e44f7795b82e43\r\n","export const formatDate = (timezone) => {\r\n  const a = new Date();\r\n  a.setMinutes((a.getMinutes() + a.getTimezoneOffset()) + timezone / 60);\r\n  const months = [\r\n    'Jan',\r\n    'Feb',\r\n    'Mar',\r\n    'Apr',\r\n    'May',\r\n    'Jun',\r\n    'Jul',\r\n    'Aug',\r\n    'Sep',\r\n    'Oct',\r\n    'Nov',\r\n    'Dec',\r\n  ];\r\n\r\n  const month = months[a.getMonth()];\r\n  const date = a.getDate();\r\n  const hour = a.getHours();\r\n  const min = a.getMinutes();\r\n  const sec = a.getSeconds();\r\n  return date + ' ' + month + ' ' + hour + 'h: ' + min + 'm: ' + sec + 's';\r\n};\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport cl from './MyLink.module.css';\r\nconst MyLink = ({ to, children, style }) => {\r\n  return (\r\n    <Link style={style} className={cl.myLink} to={to} data-testid={'my-link'}>\r\n      {children}\r\n    </Link>\r\n  );\r\n};\r\nexport default MyLink;\r\n","import { TEMP_CONST } from '../constants';\r\n\r\nexport const getTemperature = (temp) => {\r\n    return (temp - TEMP_CONST).toFixed(1)\r\n}\r\n\r\nexport const convertToKm = (meters) => {\r\n    return meters / 1000;\r\n}","export const TEMP_CONST = 273.15;\r\nexport const TEMP_HOT = 20;\r\nexport const TEMP_WARM = 5;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getCityWeather, updateCityInfo } from '../../store/actions/actions';\r\nimport { formatDate } from '../utils/timer';\r\nimport MyLink from '../UI/Link/MyLink';\r\nimport classnames from 'classnames';\r\nimport { TEMP_HOT, TEMP_WARM } from '../../constants';\r\nimport { getTemperature } from '../../helpers';\r\n\r\nconst Card = ({ cityInfo, handleRemoveCity, updateCityInfo }) => {\r\n  const currentTemp = getTemperature(cityInfo.main.temp);\r\n\r\n  return (\r\n    <div>\r\n      {cityInfo ? (\r\n        <div\r\n          data-testid={'card-wrapper'}\r\n          className={classnames('sinoptik', {\r\n            'hot-form': currentTemp >= TEMP_HOT,\r\n            'warmly-form': currentTemp < TEMP_HOT && currentTemp > TEMP_WARM,\r\n            'cold-form': currentTemp <= TEMP_WARM,\r\n          })}\r\n        >\r\n          <div className=\"sinoptik__content\">\r\n            <div>\r\n              <div className=\"sinoptik__result\">\r\n                Время сейчас: {formatDate(cityInfo.timezone)}\r\n              </div>\r\n              <div className=\"sinoptik__result\">\r\n                Погода, {cityInfo.name}:{' '}\r\n                <span data-testid={'current-temp'}>{currentTemp}</span>°C\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <span\r\n                data-testid={'remove'}\r\n                onClick={() => handleRemoveCity(cityInfo.id)}\r\n                className=\"sinoptik__close\"\r\n              />\r\n              <img\r\n                className=\"sinoptik__img\"\r\n                src={`http://openweathermap.org/img/w/${cityInfo.weather[0].icon}.png`}\r\n                alt=\"\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"sinoptik__info\">\r\n            <MyLink\r\n              style={{ fontWeight: 'normal' }}\r\n              to={`/posts/${cityInfo.name}`}\r\n            >\r\n              Детальная информация\r\n            </MyLink>\r\n            <button\r\n              data-testid={'update'}\r\n              className={classnames('sinoptik__refresh-button', {\r\n                'hot-button': currentTemp >= TEMP_HOT,\r\n                'warmly-button':\r\n                  currentTemp < TEMP_HOT && currentTemp > TEMP_WARM,\r\n                'cold-button': currentTemp <= TEMP_WARM,\r\n              })}\r\n              onClick={() => updateCityInfo(cityInfo.name)}\r\n            >\r\n              Обновить информацию\r\n            </button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <h1>Cписок городов пуст!</h1>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  getCityWeather,\r\n  updateCityInfo,\r\n};\r\nexport default connect(null, mapDispatchToProps)(Card);\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport '../styles/App.css';\r\nimport '../styles/ProximaNova/stylesheet.css';\r\nimport Createform from '../components/CreateForm/CreateForm';\r\nimport Card from '../components/Card/Card';\r\nimport { getCityWeather, removeCityFromList } from '../store/actions/actions';\r\n\r\nfunction Posts({ getCityWeather, cities, removeCityFromList }) {\r\n  const [weathers, setWeathers] = useState([]);\r\n  const [isShowCard, setShowCard] = useState(false);\r\n  const [isShowCity, setShowCity] = useState();\r\n\r\n  const fetchWeather = (name) => {\r\n    getCityWeather(name);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"header\">\r\n        <h1>\r\n          <span>S</span>inoptik\r\n        </h1>\r\n        <h2>CHOOSE A CITY</h2>\r\n      </div>\r\n      <div className=\"container\">\r\n        <Createform setWeather={fetchWeather} />\r\n        {cities.map((city) => {\r\n          return (\r\n            <div className=\"card\" key={city.id}>\r\n              <Card\r\n                handleRemoveCity={removeCityFromList}\r\n                cityInfo={city}\r\n                setWeather={fetchWeather}\r\n                weathers={weathers}\r\n                isShowCard={isShowCard}\r\n                isShowCity={isShowCity}\r\n              />\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    cities: state.stateReducer.cities,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  getCityWeather,\r\n  removeCityFromList,\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Posts);\r\n","import React from 'react';\r\nimport classes from './Loader.module.css';\r\nconst Loader = () => {\r\n  return <div className={classes.loader} data-testid={'loader'}/>;\r\n};\r\n\r\nexport default Loader;\r\n","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\nimport MyLink from '../../components/UI/Link/MyLink';\r\nimport Loader from '../../components/UI/Loader/Loader';\r\nimport { fetchCityWeather, getCityWeather } from '../../store/actions/actions';\r\nimport classnames from 'classnames';\r\nimport { convertToKm, getTemperature } from '../../helpers';\r\n\r\nconst PostCity = ({ cityInfo, getCityWeather }) => {\r\n  const { name } = useParams();\r\n  console.log(cityInfo);\r\n  useEffect(() => {\r\n    getCityWeather(name);\r\n  }, [getCityWeather, name]);\r\n\r\n  return (\r\n    <div>\r\n      {cityInfo ? (\r\n        <div\r\n          data-testid={'city-info'}\r\n          className={classnames('CityInfoBody', `CityInfoBody${cityInfo.weather[0].main}`)}\r\n        >\r\n          <MyLink\r\n            style={{ position: 'absolute', top: '15px', right: '15px' }}\r\n            to={'/posts'}\r\n          >\r\n            Вернуться к постам\r\n          </MyLink>\r\n\r\n          <h1 style={{ textAlign: 'center', paddingTop: '35px' }}>\r\n            Погода, {cityInfo.name}:{' '}\r\n            {getTemperature(cityInfo.main.temp)} °C\r\n          </h1>\r\n          <div className=\"cityInfo\">\r\n            <div>\r\n              <div>Давление: {cityInfo.main.pressure} мм рт. ст.</div>\r\n\r\n              <div>\r\n                Относительная влажность: {cityInfo.main.humidity} %\r\n              </div>\r\n              <div>Облачность: {cityInfo.clouds.all} %</div>\r\n            </div>\r\n            <div>\r\n              <div>Направление ветра: {cityInfo.wind.deg}°</div>\r\n              <div>Видимость: {convertToKm(cityInfo.visibility)} км</div>\r\n              <div>Скорость ветра: {cityInfo.wind.speed} м/c</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div\r\n          style={{\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            marginTop: '200px',\r\n          }}\r\n        >\r\n          <Loader />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    cityInfo: state.stateReducer.cityInfo,\r\n    cities: state.stateReducer.cities,\r\n  };\r\n};\r\nconst mapDispatchToProps = {\r\n  getCityWeather,\r\n  fetchCityWeather,\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PostCity);\r\n","import React from 'react';\r\nimport './styles/App.css';\r\nimport './styles/ProximaNova/stylesheet.css';\r\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\r\nimport Posts from './pages/Posts';\r\nimport PostCity from './pages/postCity/PostCity';\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route exact path=\"/posts\">\r\n          <Posts />\r\n        </Route>\r\n        <Route exact path=\"/posts/:name\">\r\n          <PostCity />\r\n        </Route>\r\n        <Redirect to=\"/posts\" />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import * as constans from '../constans/constans';\r\n\r\nconst initialState = {\r\n  cityInfo: null,\r\n  cities: JSON.parse(localStorage.getItem('cities')) || [],\r\n};\r\n\r\nconst stateReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case constans.FETCH_CITY_WEATHER: {\r\n      console.log(action);\r\n      return { ...state, cityInfo: action.cityInfo };\r\n    }\r\n    case constans.ADD_CITY_TO_LIST: {\r\n      return { ...state, cities: [...state.cities, action.cityInfo] };\r\n    }\r\n    case constans.REMOVE_CITY_FROM_LIST: {\r\n      return { ...state, cities: action.cities };\r\n    }\r\n    case constans.UPDATE_CITY_INFO: {\r\n      return { ...state, cities: action.cities };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default stateReducer;\r\n","import { combineReducers } from 'redux';\r\nimport stateReducer from './reducers/stateReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  stateReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport logger from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './rootReducer';\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk, logger))\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport store from './store/configureStore';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}